name: Nightly Deployment

on:
  push:
    branches:
      - main
  schedule:
    - cron: "0 2 * * *"
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout infra-repo
        uses: actions/checkout@v3

      - name: Checkout source-repo
        uses: actions/checkout@v3
        with:
          repository: https://github.com/knakatasf/DevOps-MidTerm
          token: ${{ secrets.ACCESS_TOKEN }}
          path: source-repo

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Deploy EC2 instance
        run: |
          aws cloudformation deploy \
          --template-file cloudformation/ec2-instance.yml \
          --stack-name temp-ec2-stack \
          --capabilities CAPABILITY_NAMED_IAM

      - name: Wait for EC2 instance to be ready
        run: sleep 30

      - name: Get EC2 public IP
        id: get-ip
        run: |
          PUBLIC_IP=$(aws cloudformation describe-stacks --stack-name temp-ec2-stack \
            --query "Stacks[0].Outputs[?OutputKey=='PublicIp'].OutputValue" --output text)
          echo "PUBLIC_IP=${PUBLIC_IP}" >> $GITHUB_ENV

      - name: Run Smoke Tests on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/my-key.pem ec2-user@${{ env.PUBLIC_IP }} << 'EOF'
          echo "Running Smoke Tests..."
          docker --version
          EOF

#      - name: If Tests Pass, Push to ECR
#        run: |
#          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin your-ecr-url
#          docker build -t your-app .
#          docker tag your-app:latest your-ecr-url/your-app:latest
#          docker push your-ecr-url/your-app:latest
#
#      - name: Deploy to QA EC2
#        run: |
#          ssh ec2-user@your-qa-ec2 "docker pull your-ecr-url/your-app:latest && docker-compose up -d"
